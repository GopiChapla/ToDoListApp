{"ast":null,"code":"var _jsxFileName = \"/home/hp/Documents/React/todolist2/src/Demo.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Demo = () => {\n  _s();\n\n  const [data, setData] = useState();\n  useEffect(() => {\n    // CHECK IF THERE IS A LOGGED IN USER FROM PREVIOUS SESSIONS\n    const loggedUserJSON = window.localStorage.getItem(\"todolist\");\n\n    if (loggedUserJSON) {\n      console.log(\"JSON user\", loggedUserJSON);\n      const parsedUser = JSON.parse(loggedUserJSON);\n      console.log(\"parsed user\", parsedUser);\n      parsedUser = \"Hello\";\n      setData(parsedUser);\n    }\n\n    console.log(\"current logged in user: \", data); // this will only print null becase `setUser(parsedUser)` is not yet reflected \n  }, []);\n  useEffect(() => {\n    console.log(\"current logged in user on every render: \", data); // this will console the value every time user value changes intially it will be null and on second time it will show your data\n  }, [data]); // const a=JSON.parse(localStorage.getItem(\"todolist\"))\n  // console.log( \"aa\"+ a)\n  // useEffect(() => {\n  //     // CHECK IF THERE IS A LOGGED IN USER FROM PREVIOUS SESSIONS\n  //     const loggedUserJSON = window.localStorage.getItem(\"todolist\");\n  //     if (loggedUserJSON) {\n  //       console.log(\"JSON user\", loggedUserJSON);\n  //       const parsedUser = JSON.parse(loggedUserJSON);\n  //       console.log(\"parsed user\", parsedUser);\n  //       setData(parsedUser);\n  //     }\n  //     console.log(\"current logged in user: \", data); // this will only print null because `setUser(parsedUser)` is not yet reflected \n  //   }, []);\n  // if(a)\n  // {\n  //     setData(a)\n  // console.log( \"aaq......\"+ a)\n  // }\n  // console.log(\"data...\"+data)\n  // const d=useMemo(()=>{\n  //     setData(c)\n  //     console.log(\"jjj\"+ typeof c)\n  //     data.map(element => {\n  //         console.log(\"el \"+element)\n  //     });\n  // },[data])\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), data]\n  }, void 0, true);\n};\n\n_s(Demo, \"dW22/rdejm9UWyuFsp94dpBqsJ8=\");\n\n_c = Demo;\nexport default Demo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Demo\");","map":{"version":3,"names":["useEffect","useMemo","useState","Demo","data","setData","loggedUserJSON","window","localStorage","getItem","console","log","parsedUser","JSON","parse"],"sources":["/home/hp/Documents/React/todolist2/src/Demo.js"],"sourcesContent":["import { useEffect, useMemo, useState } from \"react\"\n\nconst Demo=()=>{\n\n    const [data,setData]=useState()\n    \n    useEffect(() => {\n        // CHECK IF THERE IS A LOGGED IN USER FROM PREVIOUS SESSIONS\n        const loggedUserJSON = window.localStorage.getItem(\"todolist\");\n        if (loggedUserJSON) {\n          console.log(\"JSON user\", loggedUserJSON);\n          const parsedUser = JSON.parse(loggedUserJSON);\n          console.log(\"parsed user\", parsedUser);\n          parsedUser=\"Hello\"\n          setData(parsedUser);\n        }\n        console.log(\"current logged in user: \", data); // this will only print null becase `setUser(parsedUser)` is not yet reflected \n      }, []);\n      useEffect(()=> {\n         console.log(\"current logged in user on every render: \", data);  // this will console the value every time user value changes intially it will be null and on second time it will show your data\n      },[data]);\n    \n\n        // const a=JSON.parse(localStorage.getItem(\"todolist\"))\n        // console.log( \"aa\"+ a)\n        // useEffect(() => {\n        //     // CHECK IF THERE IS A LOGGED IN USER FROM PREVIOUS SESSIONS\n        //     const loggedUserJSON = window.localStorage.getItem(\"todolist\");\n        //     if (loggedUserJSON) {\n        //       console.log(\"JSON user\", loggedUserJSON);\n        //       const parsedUser = JSON.parse(loggedUserJSON);\n        //       console.log(\"parsed user\", parsedUser);\n        //       setData(parsedUser);\n        //     }\n        //     console.log(\"current logged in user: \", data); // this will only print null because `setUser(parsedUser)` is not yet reflected \n        //   }, []);\n        // if(a)\n        // {\n        //     setData(a)\n        // console.log( \"aaq......\"+ a)\n\n        // }\n        // console.log(\"data...\"+data)\n\n        \n    \n    \n    \n    // const d=useMemo(()=>{\n    //     setData(c)\n    //     console.log(\"jjj\"+ typeof c)\n    //     data.map(element => {\n    //         console.log(\"el \"+element)\n    //     });\n    // },[data])\n      \n    \n\n    \n\n    return(\n        <>\n            <h1>Demo</h1>\n\n            {data}\n        </>\n    )\n}\nexport default Demo"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;;;;AAEA,MAAMC,IAAI,GAAC,MAAI;EAAA;;EAEX,MAAM,CAACC,IAAD,EAAMC,OAAN,IAAeH,QAAQ,EAA7B;EAEAF,SAAS,CAAC,MAAM;IACZ;IACA,MAAMM,cAAc,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAAvB;;IACA,IAAIH,cAAJ,EAAoB;MAClBI,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBL,cAAzB;MACA,MAAMM,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWR,cAAX,CAAnB;MACAI,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BC,UAA3B;MACAA,UAAU,GAAC,OAAX;MACAP,OAAO,CAACO,UAAD,CAAP;IACD;;IACDF,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCP,IAAxC,EAVY,CAUmC;EAChD,CAXM,EAWJ,EAXI,CAAT;EAYEJ,SAAS,CAAC,MAAK;IACZU,OAAO,CAACC,GAAR,CAAY,0CAAZ,EAAwDP,IAAxD,EADY,CACoD;EAClE,CAFQ,EAEP,CAACA,IAAD,CAFO,CAAT,CAhBS,CAqBP;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EAMJ;EACA;EACA;EACA;EACA;EACA;EACA;;EAMA,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,EAGKA,IAHL;EAAA,gBADJ;AAOH,CAjED;;GAAMD,I;;KAAAA,I;AAkEN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}